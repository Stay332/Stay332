#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define FOOD_SCORE 10
#define MAX_GHOSTS 30
#define CAPSULE_DURATION 10
#define CAPSULE_SCORE 50
#define GHOST_SCORE 200

typedef enum gameState { losing, onGoing, winning } GameState;
typedef enum direction { up, down, left, right, idle } Direction;
typedef struct ghost {
    int row, col;
    char cover;
    Direction dir;
    bool valid;
} eachghost;

typedef struct game {
    char** grid;     // a 2-dimensional array of characters to display the game;
    int rows;        // number of rows of the grid;
    int columns;     // number of columns of the grid;
    int foodCount;   // number of remaining food in the game;
    int score;       // current score;
    GameState state; // the state of the game, one of losing, onGoing, or winning.
    int prow, pcol;
    int superpower;
    int ghostcount;
    int totalghosts;
    eachghost ghosts[30];
    int pacman;
    bool scare;
    bool ghostmove;
} Game;
void ScaredGhost(Game* game) {
    for (int i = 0; i < (*game).rows; i++) {
        for (int k = 0; k < (*game).columns; k++) {
            if ((*game).grid[i][k] == '@')
                (*game).grid[i][k] = 'X';
        }
    }
    return;
}
void NormalGhost(Game* game) {
    for (int i = 0; i < (*game).rows; i++) {
        for (int k = 0; k < (*game).columns; k++) {
            if ((*game).grid[i][k] == 'X')
                (*game).grid[i][k] = '@';
        }
    }
    return;
}
/* Creates a new game, with given rows and columns.
 * The top-left corner is at row 0 and column 0.
 * Boundary is not included in either rows or columns.
 * You should dynamically allocate space for a Game pointer,
 * dynamically allocate a 2-dimensional char grid,
 * and initialize any other value in your Game structure.
 * Return that pointer to the game you created.
 */
Game* NewGame(int rows, int columns) {
    Game* once = (Game*)malloc(sizeof(Game));
    (*once).rows = rows;
    (*once).columns = columns;
    (*once).foodCount = 0;
    (*once).score = 0;
    (*once).grid = (char**)malloc(sizeof(char*) * rows);
    for (int i = 0; i < rows; i++) {
        (*once).grid[i] = (char*)malloc(sizeof(char) * columns);
        for (int k = 0; k < columns; k++)
            (*once).grid[i][k] = ' ';
    }
    (*once).pacman = 0;
    (*once).superpower = 0;
    (*once).ghostcount = 0;
    (*once).scare = false;
    (*once).totalghosts = 0;
    (*once).ghostmove = true;
    return once;
}

/* Ends your game by freeing any memory
 * you dynamically allocated.
 * After that, free the "game" pointer,
 * since it is also dynamically created.
 */
void EndGame(Game* game) {
    for (int i = 0; i < (*game).rows; i++)
        free((*game).grid[i]);
    free((*game).grid);
    free(game);
    return;
}

/* Adds a wall to the game, at row = r, column = c.
 * Walls should be added only to an empty place.
 * After you successfully add a wall,
 * you should modify the "grid" to represent
 * the wall by '#'. Then, return true.
 * Return false on failures.
 */
bool AddWall(Game* game, int r, int c) {
    if (r >= (*game).rows || c >= (*game).columns || r < 0 || c < 0)
        return false;
    else if ((*game).grid[r][c] == ' ') {
        (*game).grid[r][c] = '#';
        return true;
    }
    else
        return false;
}

/* Adds a food to the game, at row = r, column = c.
 * Foods should be added only to an empty place.
 * After you successfully add a food,
 * you should modify the "grid" to represent
 * the food by '.', also update the "foodCount"
 * correctly. Then, return true.
 * Return false on failures.
 */
bool AddFood(Game* game, int r, int c) {
    if (r >= (*game).rows || c >= (*game).columns || r < 0 || c < 0)
        return false;
    else if ((*game).grid[r][c] == ' ') {
        (*game).grid[r][c] = '.';
        (*game).foodCount++;
        return true;
    }
    else
        return false;
}


/* Adds a Pacman to the game! At row = r, column = c.
 * If there is already a Pacman, return false.
 * Pacman should be added only to an empty place.
 * After you successfully add a Pacman,
 * you should modify the "grid" to represent
 * the Pacman by 'C'. Then, return true.
 * Return false on failures.
 */
bool AddPacman(Game* game, int r, int c) {
    (*game).state = onGoing;
    if ((*game).pacman == 1)
        return false;
    else if (r >= (*game).rows || c >= (*game).columns || r < 0 || c < 0)
        return false;
    else if ((*game).grid[r][c] == ' ') {
        (*game).grid[r][c] = 'C';
        (*game).prow = r;
        (*game).pcol = c;
        (*game).pacman++;
        return true;
    }
    else
        return false;
}

/* Moves Pacman in the given direction.
 * The direction will always be valid.
 * Pacman should stay still if this move
 * will let it hit a wall or boundaries.
 * No matter what move is performed, the
 * game's score should decrease by 1.
 *
 * If Pacman eats a food, the game's score
 * should increase by FOOD_SCORE. If that
 * food is the last one in the game, you
 * should mark the game's state as "winning".
 *
 *
 * FOR PART B:
 *
 * Pacman is allowed to move onto a grid
 * with a ghost. In that case, Pacman loses,
 * and will not be able to eat the food or capsule
 * under that ghost, if any. Score should
 * still decrease by 1, and you should mark the
 * game's state as "losing".
 *
 * If Pacman eats a capsule, the game's score
 * should increase by CAPSULE_SCORE, and Pacman
 * will gain CAPSULE_DURATION = 10 turns of
 * superpower. If that capsule is the last food
 * in the game, mark the game's state as "winning".
 *
 */
void MovePacman(Game* game, Direction direction) {
    (*game).score--;
    if ((*game).superpower > 0) {
        (*game).superpower--;
        ScaredGhost(game);
        if ((*game).ghostmove == true)
            (*game).ghostmove = false;
        else if ((*game).ghostmove == false)
            (*game).ghostmove = true;
    }
    if ((*game).superpower == 0)
        (*game).ghostmove = true;
    int row = (*game).prow, col = (*game).pcol;
    if (direction == up)
        row--;
    if (direction == down)
        row++;
    if (direction == left)
        col--;
    if (direction == right)
        col++;
    if (direction != idle) {
        if (0 <= row && row < (*game).rows && 0 <= col && col < (*game).columns) {
            if ((*game).grid[row][col] == '.') {
                (*game).grid[row][col] = 'C';
                (*game).grid[(*game).prow][(*game).pcol] = ' ';
                (*game).score += FOOD_SCORE;
                (*game).prow = row;
                (*game).pcol = col;
                (*game).foodCount--;
                if ((*game).foodCount == 0)
                    (*game).state = winning;
            }
            else if ((*game).grid[row][col] == ' ') {
                (*game).grid[row][col] = 'C';
                (*game).grid[(*game).prow][(*game).pcol] = ' ';
                (*game).prow = row;
                (*game).pcol = col;
            }
            else if ((*game).grid[row][col] == '@') {
                (*game).grid[(*game).prow][(*game).pcol] = ' ';
                (*game).state = losing;
            }
            else if ((*game).grid[row][col] == 'X') {
                (*game).score += GHOST_SCORE;
                (*game).totalghosts--;
                for (int i = 0; i < (*game).ghostcount; i++) {
                    eachghost one = (*game).ghosts[i];
                    if (one.row == row && one.col == col) {
                        (*game).ghosts[i].valid = false;
                        if ((*game).ghosts[i].cover == '.') {
                            (*game).foodCount--;
                            (*game).score += FOOD_SCORE;
                            if ((*game).foodCount == 0)
                                (*game).state = winning;
                        }
                        else if ((*game).ghosts[i].cover == 'o') {
                            (*game).scare = true;
                            (*game).score += CAPSULE_SCORE;
                            (*game).superpower = CAPSULE_DURATION;                            
                            (*game).foodCount--;
                            if ((*game).foodCount == 0)
                                (*game).state = winning;
                            ScaredGhost(game);
                        }
                    }
                }               
                (*game).grid[row][col] = 'C';
                (*game).grid[(*game).prow][(*game).pcol] = ' ';
                (*game).prow = row;
                (*game).pcol = col;
            }
            else if ((*game).grid[row][col] == 'o') {
                (*game).score += CAPSULE_SCORE;
                (*game).superpower = CAPSULE_DURATION;
                (*game).grid[row][col] = 'C';
                (*game).grid[(*game).prow][(*game).pcol] = ' ';
                (*game).prow = row;
                (*game).pcol = col;
                (*game).foodCount--;
                if ((*game).foodCount == 0)
                    (*game).state = winning;
                ScaredGhost(game);
            }
        }
    }
    if ((*game).superpower == 0)
        NormalGhost(game);
    return;
}

//////////////////////// PART B ////////////////////////


/* Adds a ghost to the game,
 * at row = r, column = c, with given initial direction.
 * you should modify the "grid" to represent the ghost by '@'.
 * Ghosts can be added to an empty place or on a food.
 * For the latter case, the ghost will cover that food on display,
 * represented also by an '@'.
 * That food must still exist, and that grid should
 * display '.' when the ghost leaves.
 */
bool AddGhost(Game* game, int r, int c, Direction direction) {
    if (r >= (*game).rows || c >= (*game).columns || r < 0 || c < 0 || (*game).ghostcount >= MAX_GHOSTS)
        return false; // This is not always correct.
    else if ((*game).grid[r][c] == ' ' || (*game).grid[r][c] == '.') {
        eachghost one;
        one.row = r;
        one.col = c;
        one.dir = direction;
        one.cover = (*game).grid[r][c];
        one.valid = true;
        (*game).ghosts[(*game).ghostcount] = one;
        (*game).ghostcount++;
        (*game).grid[r][c] = '@';
        return true;
    }
    else
        return false;
}

/* Moves all ghosts in their own directions.
 * Ghosts should be moved in the order they were added.
 * If a ghost will bump into a wall, another ghost, or a boundary,
 * Its direction will reverse, and it will try to move
 * in the new direction immediately this turn.
 * If it bumps into another wall/ghost/boundary,
 * it won't move for this turn.
 */
void MoveGhosts(Game* game) {
    if ((*game).superpower > 0)
        (*game).scare = true;
    if ((*game).ghostmove == false && (*game).superpower != 0)
        return;
    if ((*game).superpower == 0) {
        NormalGhost(game);
        (*game).scare = false;
    }
    for (int i = 0; i < (*game).ghostcount; i++) {
        eachghost one = (*game).ghosts[i];
        int col = one.col, row = one.row;
        Direction dir = one.dir;
        if (one.valid == false) {
            continue;
        }
        if (dir == down) {
            row++;
            if (row >= 0 && row < (*game).rows && (*game).grid[row][col] == 'C') {
                if ((*game).scare == false) {
                    (*game).grid[row][col] = '@';
                    (*game).grid[row - 1][col] = (*game).ghosts[i].cover;
                    (*game).state = losing;
                }
                else {
                    (*game).score += GHOST_SCORE;
                    one.valid = false;
                    (*game).totalghosts--;
                    (*game).grid[row - 1][col] = (*game).ghosts[i].cover;
                }
            }
            else if (row >= 0 && row < (*game).rows && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                (*game).grid[row - 1][col] = one.cover;
                one.cover = (*game).grid[row][col];
                (*game).grid[row][col] = '@';
            }
            else {
                one.dir = up;
                row -= 2;
                if (row >= 0 && row < (*game).rows && (*game).grid[row][col] == 'C') {
                    if ((*game).scare == false){
                        (*game).grid[row + 1][col] = (*game).ghosts[i].cover;
                        (*game).grid[row][col] = '@';
                        (*game).state = losing;
                    }
                    else {
                        (*game).grid[row + 1][col] = (*game).ghosts[i].cover;
                        (*game).score += GHOST_SCORE;
                        one.valid = false;
                        (*game).totalghosts--;
                    }
                }
                else if (row >= 0 && row < (*game).rows && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                    (*game).grid[row + 1][col] = one.cover;
                    one.cover = (*game).grid[row][col];
                    (*game).grid[row][col] = '@';
                }
                else {
                    row++;
                }
            }
        }
        if (dir == up) {
            row--;
            if (row >= 0 && row < (*game).rows && (*game).grid[row][col] == 'C') {
                if ((*game).scare == false) {
                (*game).grid[row+1][col] = (*game).ghosts[i].cover;
                (*game).grid[row][col] = '@';
                (*game).state = losing;
                }
                else {
                    (*game).score += GHOST_SCORE;
                    one.valid = false;
                    (*game).totalghosts--;
                    (*game).grid[row + 1][col] = (*game).ghosts[i].cover;
                }
            }
            else if (row >= 0 && row < (*game).rows && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                (*game).grid[row + 1][col] = one.cover;
                one.cover = (*game).grid[row][col];
                (*game).grid[row][col] = '@';
            }
            else {
                one.dir = down;
                row += 2;
                if (row >= 0 && row < (*game).rows && (*game).grid[row][col] == 'C') {
                    if ((*game).scare == false) {
                        (*game).grid[row - 1][col] = (*game).ghosts[i].cover;
                        (*game).grid[row][col] = '@';
                    (*game).state = losing;
                    }
                    else {
                        (*game).score += GHOST_SCORE;
                        one.valid = false;
                        (*game).totalghosts--;
                        (*game).grid[row - 1][col] = (*game).ghosts[i].cover;
                    }
                }
                else if (row >= 0 && row < (*game).rows && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                    (*game).grid[row - 1][col] = one.cover;
                    one.cover = (*game).grid[row][col];
                    (*game).grid[row][col] = '@';
                }
                else {
                    row--;
                }
            }
        }
        if (dir == right) {
            col++;
            if (col >= 0 && col < (*game).columns && (*game).grid[row][col] == 'C') {
                if ((*game).scare == false) {
                    (*game).grid[row][col-1] = (*game).ghosts[i].cover;
                    (*game).grid[row][col] = '@';
                    (*game).state = losing;
                }
                else {
                    (*game).score += GHOST_SCORE;
                    one.valid = false;
                    (*game).totalghosts--;
                    (*game).grid[row][col - 1] = (*game).ghosts[i].cover;
                }
            }
            else if (col >= 0 && col < (*game).columns && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                (*game).grid[row][col - 1] = one.cover;
                one.cover = (*game).grid[row][col];
                (*game).grid[row][col] = '@';
            }
            else {
                one.dir = left;
                col -= 2;
                if (col >= 0 && col < (*game).rows && (*game).grid[row][col] == 'C') {
                    if ((*game).scare == false) {
                        (*game).grid[row][col + 1] = (*game).ghosts[i].cover;
                        (*game).grid[row][col] = '@';
                        (*game).state = losing;
                    }
                    else {
                        (*game).score += GHOST_SCORE;
                        one.valid = false;
                        (*game).totalghosts--;
                        (*game).grid[row][col + 1] = (*game).ghosts[i].cover;
                    }
                }
                else if (col >= 0 && col < (*game).columns && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                    (*game).grid[row][col + 1] = one.cover;
                    one.cover = (*game).grid[row][col];
                    (*game).grid[row][col] = '@';
                }
                else {
                    col++;
                }
            }
        }
        if (dir == left) {
            col--;
            if (col >= 0 && col < (*game).columns && (*game).grid[row][col] == 'C') {
                if ((*game).scare == false) {
                    (*game).grid[row][col + 1] = (*game).ghosts[i].cover;
                    (*game).grid[row][col] = '@';
                    (*game).state = losing;
                }
                else {
                    (*game).score += GHOST_SCORE;
                    one.valid = false;
                    (*game).totalghosts--;
                    (*game).grid[row][col + 1] = (*game).ghosts[i].cover;
                }
            }
            else if (col >= 0 && col < (*game).columns && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                (*game).grid[row][col + 1] = one.cover;
                one.cover = (*game).grid[row][col];
                (*game).grid[row][col] = '@';
            }
            else {
                one.dir = right;
                col += 2;
                if (col >= 0 && col < (*game).columns && (*game).grid[row][col] == 'C') {
                    if ((*game).scare == false) {
                        (*game).grid[row][col - 1] = (*game).ghosts[i].cover;
                        (*game).grid[row][col] = '@';
                        (*game).state = losing;
                    }
                    else {
                        (*game).score += GHOST_SCORE;
                        one.valid = false;
                        (*game).totalghosts--;
                        (*game).grid[row][col - 1] = (*game).ghosts[i].cover;
                    }
                }
                else if (col >= 0 && col < (*game).columns && ((*game).grid[row][col] == ' ' || (*game).grid[row][col] == '.' || (*game).grid[row][col] == 'o')) {
                    (*game).grid[row][col - 1] = one.cover;
                    one.cover = (*game).grid[row][col];
                    (*game).grid[row][col] = '@';
                }
                else {
                    col--;
                }
            }

        }
        one.col = col;
        one.row = row;
        (*game).ghosts[i] = one;
        if ((*game).scare == false)
            NormalGhost(game);
        if ((*game).scare == true)
            ScaredGhost(game);
    }
    return;
}
/* Adds a capsule to the game, at row = r, column = c.
 * Capsules should be added only to an empty place,
 * or added to a cell with food to upgrade that food.
 * After you successfully add a capsule, return true.
 * Return false on failures.
 *
 * Capsules will grant Pacman CAPSULE_SCORE = 50 and
 * CAPSULE_DURATION = 10 turns of superpower when eaten.
 *
 * When with superpower, scared ghosts will be displayed in 'X',
 * and will be unable to move every other turn.
 * (they can move on the turn when Pacman eats a capsule.)
 * When Pacman eats a scared ghost, it earns GHOST_SCORE = 200.
 *
 * Pacman's superpower activates immediately when it eats a
 * capsule, and counts down immediately after Pacman's turn,
 * starting from its next turn. In other words, Pacman's superpower
 * ends after 10 turns at the same moment of eating a capsule.
 */
bool AddCapsule(Game* game, int r, int c) {
    if (r >= (*game).rows || c >= (*game).columns || r < 0 || c < 0)
        return false;
    else if ((*game).grid[r][c] == ' ')  {
        (*game).grid[r][c] = 'o';
        (*game).foodCount++;
        return true;
    }
    else if ((*game).grid[r][c] == '.') {
        (*game).grid[r][c] = 'o';
        return true;
    }
    else
        return false;
    // This is not always correct.
}


///////////////////////////////////////////////////////////////////////////////
/////////////////// Please submit all code above to OJ ////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Declarations of provided functions
void PlayGame(Game* game);

int main() {
    Game* game = NewGame(8, 8);
    AddFood(game, 2, 3);
    AddFood(game, 1, 5);
    AddFood(game, 3, 3);
    AddGhost(game, 2, 1, right);
    AddPacman(game, 7, 2);
    AddGhost(game, 3, 3, left);
    AddGhost(game, 3, 2, up);
    AddWall(game, 1, 1);
    AddWall(game, 3, 4);
    AddWall(game, 3, 1);
    AddFood(game, 4, 2);
    AddGhost(game, 0, 0, up);
    AddFood(game, 6, 3);
    AddCapsule(game, 2, 2);
    AddCapsule(game, 7, 3);
    AddCapsule(game, 7, 4);
    AddCapsule(game, 7, 5);
    // Add walls, foods, and pacman here.

    PlayGame(game);
}

///////////////////////////////////////////////////////////////////////////////
//////////////////////// DO NOT MODIFY ANY CODE BELOW! ////////////////////////
///////////////////////////////////////////////////////////////////////////////

/* This function prints the game grid with boundary,
 * and any message depending on game state.
 * Please make sure that, after any action is done,
 * game->state, game->score, and game->foodCount
 * are correctly updated.
 */
#ifdef _WIN32

#include <windows.h>

#endif // _WIN32

void PrintGame(Game* game) {
    if (!game || !game->grid) return;

    // If Windows, clear console.
#ifdef _WIN32 
    system("cls");
#else
// Clears terminal screen
    fflush(stdout);
    system("clear");
#endif

    // The game grid
    printf(" ");
    for (int i = 0; i < game->columns; i++)
        printf("_");
    printf(" \n");

    for (int i = 0; i < game->rows; i++) {
        printf("|");
        for (int j = 0; j < game->columns; j++)
            printf("%c", game->grid[i][j]);
        printf("|\n");
    }
    printf("\\");
    for (int i = 0; i < game->columns; i++)
        printf("-");
    printf("/\n\n");

    // Messages on different states
    switch (game->state) {
    case losing:
        printf("Pacman died! Your score: %d\n", game->score);
        break;
    case onGoing:
        printf("Score: %d\n", game->score);
        printf("There are %d foods remaining!\n", game->foodCount);
        printf("Pacman wants food! (control by w/a/s/d/i, confirm by Enter)\n\n");
        break;
    case winning:
        printf("Victory! Your score: %d\n", game->score);
        break;
    default:
        printf("ERROR: invalid game state!\n");
    }
}

/* Plays the game, and calls EndGame on winning or losing.
 */
void PlayGame(Game* game) {

    // Prints the initial grid
    PrintGame(game);

    // Main loop of game. Terminates when the game ends.
    while (true) {
        // We only care about one charater, but should eat the whole line of input.
        char input[127];
        input[0] = '\0';
        scanf("%[^\n]", input);
        // Handles the '\n'.
        getchar();
        Direction direction;
        switch (input[0]) {
        case 'w':
        case 'W':
            direction = up; break;
        case 'a':
        case 'A':
            direction = left; break;
        case 's':
        case 'S':
            direction = down; break;
        case 'd':
        case 'D':
            direction = right; break;
        case 'i':
        case 'I':
            direction = idle; break;
        default:
            PrintGame(game);
            continue;
        }

        // Pacman moves first.
        MovePacman(game, direction);

        // Wins if Pacman eats all the food, loses if Pacman bumps into a ghost.
        if (game->state != onGoing) {
            break;
        }

        // If you haven't implemented ghosts, this does nothing.
        MoveGhosts(game);

        // Loses if a ghost kills Pacman.
        if (game->state != onGoing) {
            break;
        }
        PrintGame(game);
    }

    // End game message
    PrintGame(game);
    printf("Press Enter to exit.\n");
    EndGame(game);
    getchar();
}
