#include <stdio.h>
int cards(int*);
int min(int, int);

int main() {
	int times, quantity;
	scanf("%d", &times);
	getchar();
	scanf("%d", &quantity);
	getchar();
	for (int i = 0; i < times; i++) {
		int card[14] = { 0 };
		int each; char blank;
		while (scanf("%d", &each) != EOF) {
			card[each - 1]++;
			blank = getchar();
			if (blank == '\n')
				break;
		}
		int newcard[14] = { 0 };
		for (int d = 0; d < 11; d++) {
			newcard[d] = card[d + 2];
		}
		newcard[13] = card[13];
		newcard[11] = card[0];
		newcard[12] = card[1];
		int once;
		once = cards(newcard);
		printf("%d\n", once);
	}
	return 0;
}
int cards(int* card) {
	const int a = 13;
	int minimum = 17, total = 0;
	int once[14] = { 0 }, stable[14] = { 0 }, k, s;
	for (int i = 0; i < 14; i++) {
		once[i] = card[i];
		stable[i] = card[i];
	}
	for (int i = 0; i <= 13; i++) {
		total += once[i];
	}
	if (total == 0)
		return 0;
	for (int i = 0; i <= 10; i++) { // 连三
		if (once[i] >= 3 && once[i + 1] >= 3) {
			once[i] -= 3;
			once[i + 1] -= 3;
			minimum = min(cards(once) + 1, minimum);
			k = 2;
			while (once[i + k] >= 3 && i + k < 12) {
				once[i + k] -= 3;
				minimum = min(cards(once) + 1, minimum);
				k++;
			}
			for (int d = 0; d <= a; d++) {
				once[d] = stable[d];
			}
		}
	}

	for (int i = 0; i <= a; i++) { // 四炸、四带二、四带两对
		if (once[i] == 4) {
			once[i] -= 4;
			minimum = min(cards(once) + 1, minimum); // 四炸
			for (s = 0; s <= 13; s++) {
				for (k = 0; k <= 13; k++) {
					if (s < k && once[s] >= 1 && once[k] >= 1) {
						once[s] -= 1;
						once[k] -= 1;
						minimum = min(cards(once) + 1, minimum); // 四带二
						once[s] += 1;
						once[k] += 1;
					}
					if (s < k && once[s] >= 2 && once[k] >= 2 && k != 13) { // 四带两对
						once[s] -= 2;
						once[k] -= 2;
						minimum = min(cards(once) + 1, minimum);
                      	once[s] += 2;
						once[k] += 2;
					}
				}
			}
			for (int d = 0; d <= a; d++) {
				once[d] = stable[d];
			}
		}
	}

	for (int i = 0; i < 8; i++) { // 顺子
		if (once[i] >= 1 && once[i + 1] >= 1 && once[i + 2] >= 1 && once[i + 3] >= 1 && once[i + 4] >= 1) {
			once[i] -= 1;
			once[i + 1] -= 1;
			once[i + 2] -= 1;
			once[i + 3] -= 1;
			once[i + 4] -= 1;
			minimum = min(cards(once) + 1, minimum);
			k = 5;
			while (i + k < 12 && once[i + k] >= 1) {
				once[i + k] -= 1;
				minimum = min(cards(once) + 1, minimum);
				k++;
			}
			for (int d = 0; d <= a; d++) {
				once[d] = stable[d];
			}
		}
	}

	for (int i = 0; i < 13; i++) { // 三个、三带一、三带一对
		if (once[i] >= 3) {
			once[i] -= 3;
			minimum = min(cards(once) + 1, minimum); // 三个
			for (s = 0; s <= 13; s++) { // 三带一
				if (once[s] >= 1 && s != i) {
					once[s] -= 1;
					minimum = min(cards(once) + 1, minimum);
					once[s] += 1;
				}
			}
			for (s = 0; s < 13; s++) { // 三带一对
				if (once[s] >= 2) {
					once[s] -= 2;
					minimum = min(cards(once) + 1, minimum);
					once[s] += 2;
				}
			}
			for (int d = 0; d <= a; d++) {
				once[d] = stable[d];
			}
		}
	}

	if (once[13] == 2) { // 火箭
		once[13] -= 2;
		minimum = min(cards(once) + 1, minimum);
		once[13] += 2;
	}
	for (int i = 0; i <= 10; i++) { // 连对
		if (once[i] >= 2 && once[i + 1] >= 2 && once[i + 2] >= 2) {
			once[i] -= 2;
			once[i + 1] -= 2;
			once[i + 2] -= 2;
			minimum = min(cards(once) + 1, minimum);
			k = 3;
			while (i + k <= 12 && once[i + k] >= 2) {
				once[i + k] -= 2;
				minimum = min(cards(once) + 1, minimum);
				k++;
			}
			for (int d = 0; d <= a; d++) {
				once[d] = stable[d];
			}
		}
	}
	for (int i = 0; i <= 12; i++) { // 对子
		if (once[i] == 2 && total <= 10) {
			once[i] -= 2;
			minimum = min(cards(once) + 1, minimum);
			once[i] += 2;
		}
	}
	for (int i = 0; i <= 13; i++) { // 单牌
		if (once[i] == 1 && total <= 10) {
			once[i] -= 1;
			minimum = min(cards(once) + 1, minimum);
			once[i] += 1;
		}
	}
	return minimum;
}
int min(int a, int b) {
	if (a > b)
		return b;
	else
		return a;
}
